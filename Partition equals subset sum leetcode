class Solution {
public:
    bool solve(int ind,vector<int>& nums,int sum1,int sum2,vector<vector<int>>& dp,int n)
    {
        if(ind==n)
        { 
           return sum1==sum2?true:false;
        }
        if(dp[sum1][ind]!=-1)
        {
           return dp[sum1][ind];
        }
        bool take1 = solve(ind+1,nums,sum1+nums[ind],sum2,dp,n);
        bool take2 = solve(ind+1,nums,sum1,sum2+nums[ind],dp,n);
        return dp[sum1][ind]=take1||take2?1:0;
    }
    bool canPartition(vector<int>& nums) 
    {
        int n = nums.size();
        int res = 0;
        for(int i=0;i<n;i++)
        {
            res+=nums[i];
        }
        vector<vector<int>> dp(res,vector<int>(n,-1));
        return solve(0,nums,0,0,dp,n);
    }
};
