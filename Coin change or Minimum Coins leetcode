class Solution {
public:
    int subsetSumUtil(int ind, int amount,vector<int>& coins, vector<vector<int>> &dp){
    if(ind == 0)
     {
         if(amount%coins[0] == 0)
         {
             return amount/coins[0];
         }
         else
         {
             return 1e9;
         }
     }
    
    if(dp[ind][amount]!=-1)
        return dp[ind][amount];
        
    int notTaken = subsetSumUtil(ind-1,amount,coins,dp);
    
    int taken = 1e9;
    if(coins[ind]<=amount)
      {
          taken = 1+subsetSumUtil(ind,amount-coins[ind],coins,dp);
      } 
    return dp[ind][amount]= min(notTaken,taken);
}
    int coinChange(vector<int>& coins, int& amount) 
    {
        int n = coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,-1));
        int res = subsetSumUtil(n-1,amount,coins,dp);
        if(res>=1e9)
        {
            return -1;
        }
        return res;
    }
};
