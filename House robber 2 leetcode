class Solution {
public:
    int solve(int n,vector<int>& nums,vector<int>& dp)
    {
        if(n==0)
        {
            return nums[0];
        }
        if(n<0)
        {
            return 0;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        int right = solve(n-2,nums,dp)+nums[n];
        int left = solve(n-1,nums,dp);
        return dp[n]=max(right,left);
    }
    int rob(vector<int>& nums) 
    {
        int n = nums.size();
        if(n==1)
        {
            return nums[0];
        }
        vector<int>temp1;
        vector<int>temp2;
        for(int i = 0;i<n;i++)
        {
            if(i!=0)
            {
                temp1.push_back(nums[i]);
            }
             if(i!=n-1)
            {
                temp2.push_back(nums[i]);
            }
        }
        int n1 = temp1.size();
        int n2 = temp2.size();
        vector<int>dp1(n1,-1);
        vector<int>dp2(n2,-1);
        return max(solve(n1-1,temp1,dp1),solve(n2-1,temp2,dp2));
    }
};
