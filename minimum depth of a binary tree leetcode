class Solution {
public:
    bool isLeaf(TreeNode* node)
    {
        if(node==NULL)
        {
            return false;
        }
        if(node->left==NULL&&node->right==NULL)
        {
            return true;
        }
        return false;
    }
    int depth = 0;
    int mini = INT_MAX;
    int minDepth(TreeNode* root) 
    {
        if(root==NULL)
        {
           return depth;
        }
        queue<TreeNode*>q;
        q.push(root);
        bool counter = true;
        while(!q.empty())
        {
            int size = q.size();
            depth++;
            for(int i = 0;i<size;i++)
            {
               TreeNode* front = q.front();
               q.pop();
               if(isLeaf(front->left)||isLeaf(front->right))
               {
                   depth++;
                   counter = false;
                   break;
               }
               if(front->left!=NULL)
               {
                   q.push(front->left);
               }
                if(front->right!=NULL)
               {
                   q.push(front->right);
               }
            }
            if(counter==false)
            {
              break;
            }
        }
      return depth;  
    }
};
