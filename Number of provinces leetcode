class Solution {
public:
    void dfs(vector<vector<int>>& isConnected,int u,int n,vector<bool>& visited)
    {
       visited[u]=true;
       vector<int>adj;
       for(int i = 0;i<n;i++)
       {
          if(isConnected[u][i]==1)
          {
              adj.push_back(i);
          }
       }
       for(int x : adj)
       {
           if(!visited[x])
           {
               dfs(isConnected,x,n,visited);
           }
       }
    }
    int findCircleNum(vector<vector<int>>& isConnected) 
    {
        int m = isConnected.size();
        int n = isConnected[0].size();
        int ans = 0;
        vector<bool>visited(n,false);
        for(int i = 0;i<m;i++)
        {
            if(!visited[i])
            {
                ans++;
                dfs(isConnected,i,n,visited);
            }
        }
        return ans;
    }
};
