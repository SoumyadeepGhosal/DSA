class Solution {
public:
    bool isValid(int i , int j, int n, int m, vector<vector<int>>& grid){
        if(i>=0 && i<m && j>=0 && j<n && grid[i][j] == 0){
            return true;
        }
        return false;
    }
    void dfs(int i,int j,int m,int n,vector<vector<int>>& grid)
    {
        grid[i][j]=1;
        if(isValid(i+1, j, n, m, grid)){
            dfs(i+1, j, m, n,grid);
        }
        if(isValid(i-1, j, n, m, grid)){
            dfs(i-1, j, m, n,grid);
        }
        if(isValid(i, j+1, n, m, grid)){
            dfs(i, j+1, m, n,grid);
        }
        if(isValid(i, j-1, n, m, grid)){
            dfs(i, j-1, m, n,grid);
        }
    }
    int closedIsland(vector<vector<int>>& grid) 
    {
        int m = grid.size();
        int n = grid[0].size();
        
        for(int i=0; i<m; i++){
            
            // left -> top bottom
            int j =0;
            if(grid[i][j] == 0){
                dfs(i, j, m, n,grid);
            }
            
            j = n-1;
            // right -> top bootm 
            if(grid[i][j] == 0){
                dfs(i, j, m, n,grid);
            }
        }
        
        for(int j=0; j<n; j++){
            
            // top -> left right
            int i =0;
            if(grid[i][j] == 0){
                dfs(i, j, m, n,grid);
            }
            
            i = m-1;
            // bottom -> left right
            if(grid[i][j] == 0){
                dfs( i, j, m, n,grid);
            }
        }
        int ans = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 0){
                    ans++;
                    dfs(i, j, m, n, grid);
                }
            }
        }
        return ans;
    }
};
