class Solution {
public:
    int solve(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& dp)
    { 
        if(i==0&&j==0)
        {
           return grid[i][j];
        }
        if(i<0||j<0)
        {
            return 1e8;
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int left = grid[i][j]+solve(i,j-1,grid,dp);
        int up = grid[i][j]+solve(i-1,j,grid,dp);
        return dp[i][j]=min(left,up);
    }
    int minPathSum(vector<vector<int>>& grid) 
    {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp;
        for(int i = 0;i<m;i++)
        {
            vector<int>v;
            for(int j = 0;j<n;j++)
            {
                v.push_back(-1);
            }
            dp.push_back(v);
        }
        return solve(m-1,n-1,grid,dp);
    }
};
