class Solution {
public:
    bool isValid(int i , int j, int m, int n, vector<vector<int>>& grid){
        if(i>=0 && i<n && j>=0 && j<m && grid[i][j] == 1){
            return true;
        }
        return false;
    }
    void dfs(vector<vector<int>>& grid,int i,int j,int n,int m)
    {
        grid[i][j]=0;
        if(isValid(i+1, j, n, m, grid)){
            dfs(grid, i+1, j, n, m);
        }
        if(isValid(i-1, j, n, m, grid)){
            dfs(grid, i-1, j, n, m);
        }
        if(isValid(i, j+1, n, m, grid)){
            dfs(grid, i, j+1, n, m);
        }
        if(isValid(i, j-1, n, m, grid)){
            dfs(grid, i, j-1, n, m);
        }
    }
    int numEnclaves(vector<vector<int>>& grid) 
    {
        int m = grid.size();
        int n = grid[0].size();
        for(int i=0; i<m; i++)
        {
            
            
            int j =0;
            if(grid[i][j] == 1){
                dfs(grid, i, j, n, m);
            }
            
            j = n-1;
            if(grid[i][j] == 1){
                dfs(grid, i, j, n, m);
            }
        }
        
        for(int j=0; j<n; j++)
        {
            
            
            int i =0;
            if(grid[i][j] == 1){
                dfs(grid, i, j, n, m);
            }
            
            i = m-1;
            
            if(grid[i][j] == 1){
                dfs(grid, i, j, n, m);
            }
        }
        int ans = 0;
        for(int i = 0;i<m;i++)
        {
            for(int j = 0;j<n;j++)
            {
               if(grid[i][j]==1)
               {
                   ans+=1;
               }
            }
        }
        return ans;
    }
};
