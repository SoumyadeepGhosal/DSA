class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int subsetSumUtil(int ind, int target,int wt[], int val[], vector<vector<int>> &dp){
    if(target==0)
        return 0;
    
    if(ind == 0)
     {
         if(wt[0] <= target)
         {
             return val[0];
         }
         else
         {
             return 0;
         }
     }
    
    if(dp[ind][target]!=-1)
        return dp[ind][target];
        
    int notTaken = subsetSumUtil(ind-1,target,wt,val,dp);
    
    int taken = 0;
    if(wt[ind]<=target)
      {
          taken = val[ind]+subsetSumUtil(ind-1,target-wt[ind],wt,val,dp);
      } 
    return dp[ind][target]= max(notTaken,taken);
}
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       vector<vector<int>> dp(n,vector<int>(W+1,-1));
       int target = W;
       return subsetSumUtil(n-1,target,wt,val,dp);
    }
};
